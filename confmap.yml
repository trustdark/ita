---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-ingress-configmap
  namespace: kube-system
data:
  traefik.toml: |
    [Global]
    sendAnonymousUsage = true
    debug = true
    logLevel = "DEBUG"

    [entrypoints]
      [entrypoints.web]
          address = ":80"
      [entryPoints.web-secure]
          address = ":443"
      [entrypoints.mongo-port]
          address = ":27017"

    [providers]
    [providers.file]
    [tcp]
      [tcp.routers]
          [tcp.routers.everything-to-mongo]
            entrypoints = ["mongo-port"]
            rule = "HostSNI(`*`)" # Catches every request
            service = "database"
      [tcp.services]
        [tcp.services.database.LoadBalancer]
          [[tcp.services.database.LoadBalancer.servers]]
            address = "mongodb-service.default.svc:27017"

    [http]
      [http.routers]
        [http.routers.for-jupyterx-https]
          entryPoints = ["web-secure"] # won't listen to entrypoint mongo-port
          # rule = "Host(`clients-ui.ddns.net`)"
          # rule = "Path(`/jupyterx`)" # abo /jupyterx/*
          rule = "PathPrefix(`/jupyterx`)"
          service = "jupyterx"
          [http.routers.for-jupyterx-https.tls]

        [http.routers.for-jupyterx-http]
          entryPoints = ["web"] # won't listen to entrypoint mongo-port
          # rule = "Host(`clients-ui.ddns.net`)"
          # rule = "Path(`/jupyterx`)" # abo /jupyterx/*
          rule = "PathPrefix(`/jupyterx`)"
          service = "jupyterx"

      [http.services]
        [http.services.jupyterx.LoadBalancer]
        PassHostHeader = true
        [[http.services.jupyterx.LoadBalancer.servers]]
        url = "http://jupyter-service.default.svc/"
        weight = 100

    [[TLS]]
      [TLS.Certificate]
         CertFile = "/ssl/tlsc.crt"
         KeyFile = "/ssl/tlsc.key"

    [tlsStores]
     [tlsStores.default]
       [tlsStores.default.defaultCertificate]
         certFile = "/ssl/tls.crt"
         keyFile  = "/ssl/tls.key"

    # [tlsOptions]
    #  [tlsOptions.default]
    #   [tlsOptions.default.ClientCA]
    #     files = ["/ssl/tlscl.key"]
    #     optional = true
    #     minVersion = "VersionTLS13"


    # [acme] # every router with TLS enabled will now be able to use ACME for its certificates
    #   email = "trustindark@gmail.com"
    #   storage = "acme.json"
    #   onHostRule = true # dynamic generation based on the Host() & HostSNI() matchers
    #   caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
    #  [acme.httpChallenge]
    #     entryPoint = "web" # used during the challenge
